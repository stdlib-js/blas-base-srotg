{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport absf from '@stdlib/math-base-special-absf';\nimport sqrtf from '@stdlib/math-base-special-sqrtf';\nimport abs2f from '@stdlib/math-base-special-abs2f';\nimport copysignf from '@stdlib/math-base-special-copysignf';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @param {Float32Array} out - output array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var out = srotg( 0.0, 2.0, new Float32Array( 4 ), 1, 0 );\n*  // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b, out, stride, offset ) {\n\tvar scale;\n\tvar sign;\n\tvar aa;\n\tvar ab;\n\tvar r;\n\tvar c;\n\tvar s;\n\tvar z;\n\n\taa = absf( a );\n\tab = absf( b );\n\tif ( aa > ab ) {\n\t\tsign = copysignf( 1.0, a );\n\t} else {\n\t\tsign = copysignf( 1.0, b );\n\t}\n\tscale = f32( aa + ab );\n\tif ( scale === 0.0 ) {\n\t\tc = 1.0;\n\t\ts = 0.0;\n\t\tr = 0.0;\n\t\tz = 0.0;\n\t} else {\n\t\tr = f32( scale * sqrtf( f32( abs2f( f32( a/scale ) ) + abs2f( f32( b/scale ) ) ) ) ); // eslint-disable-line max-len\n\t\tr = f32( r * sign );\n\t\tc = f32( a / r );\n\t\ts = f32( b / r );\n\t\tz = 1.0;\n\t\tif ( aa > ab ) {\n\t\t\tz = s;\n\t\t} else if ( c !== 0.0 ) {\n\t\t\tz = f32( 1.0 / c );\n\t\t}\n\t}\n\ta = r;\n\tb = z;\n\tout[ offset ] = a;\n\tout[ offset + stride ] = b;\n\tout[ offset + ( 2 * stride ) ] = c;\n\tout[ offset + ( 3 * stride ) ] = s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Constructs a Givens plane rotation.\n*\n* @param {number} a - rotational elimination parameter\n* @param {number} b - rotational elimination parameter\n* @returns {Float32Array} output array\n*\n* @example\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*/\nfunction srotg( a, b ) {\n\tvar out = new Float32Array( 4 );\n\treturn fcn( a, b, out, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default srotg;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Construct a Givens plane rotation.\n*\n* @module @stdlib/blas-base-srotg\n*\n* @example\n* import srotg from '@stdlib/blas-base-srotg';\n*\n* var out = srotg( 0.0, 2.0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* out = srotg( 6.0, -8.0 );\n* // returns <Float32Array>[ 10.0, ~-1.666, -0.6, 0.8 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import srotg from '@stdlib/blas-base-srotg';\n*\n* var out = new Float32Array( 4 );\n*\n* var y = srotg.assign( 0.0, 2.0, out, 1, 0 );\n* // returns <Float32Array>[ 2.0, 1.0, 0.0, 1.0 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],"names":["srotg","a","b","out","stride","offset","scale","sign","aa","ab","r","c","s","z","absf","copysignf","f32","sqrtf","abs2f","fcn","Float32Array","setReadOnly","main","assign"],"mappings":";;osBA+CA,SAASA,EAAOC,EAAGC,EAAGC,EAAKC,EAAQC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAiCJ,OA/BAL,EAAKM,EAAMb,GACXQ,EAAKK,EAAMZ,GAEVK,EAAOQ,EAAW,EADdP,EAAKC,EACcR,EAEAC,GAGT,KADfI,EAAQU,EAAKR,EAAKC,KAEjBE,EAAI,EACJC,EAAI,EACJF,EAAI,EACJG,EAAI,IAEJH,EAAIM,EAAKV,EAAQW,EAAOD,EAAKE,EAAOF,EAAKf,EAAEK,IAAYY,EAAOF,EAAKd,EAAEI,OACrEI,EAAIM,EAAKN,EAAIH,GACbI,EAAIK,EAAKf,EAAIS,GACbE,EAAII,EAAKd,EAAIQ,GACbG,EAAI,EACCL,EAAKC,EACTI,EAAID,EACa,IAAND,IACXE,EAAIG,EAAK,EAAML,KAGjBV,EAAIS,EACJR,EAAIW,EACJV,EAAKE,GAAWJ,EAChBE,EAAKE,EAASD,GAAWF,EACzBC,EAAKE,EAAW,EAAID,GAAaO,EACjCR,EAAKE,EAAW,EAAID,GAAaQ,EAC1BT,CACR,CClDA,SAASH,EAAOC,EAAGC,GAElB,OAAOiB,EAAKlB,EAAGC,EADL,IAAIkB,EAAc,GACL,EAAG,EAC3B,CCcAC,EAAAC,EAAA,SAAAC"}